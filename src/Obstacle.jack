class Obstacle {
    // Constants
    static int x_width;             // Width of obstacles
    static int x_vel;               // Movement speed on screen

    static int y1_blk1;             // (Initial) y1 position of blk1
    static int y2_blk1;             // (Initial) y2 position of blk1
    static int y1_blk2;             // (Initial) y1 position of blk2
    static int y2_blk2;             // (Initial) y2 position of blk2

    static int y_gate_height;       // Height of gates
    static int y1_gate1;            // (Initial) y1 position of gate1
    static int y1_gate2;            // (Initial) y1 position of gate2
    static int y1_gate3;            // (Initial) y1 position of gate3

    // Fields
    field int x1;                   // x1 position on screen
    field int x1_init;              // Initial x1 position on screen (constant)
    field boolean exists;           // Obstacle exists
    field Gate gate1;               // Gate 1
    field Gate gate2;               // Gate 2
    field Gate gate3;               // Gate 3

    function void init(int y_upper_margin) {
        var int x_width_mem, y_blk_height, y_blk_interval, y_gate_halfinter;
        
        let x_width_mem = 7;
        let x_width = 16 * x_width_mem;
        let x_vel = 2;
        let y_blk_height = 2;
        let y_gate_height = 50;
        
        let y_blk_interval = (256 - y_upper_margin - (y_blk_height * 2)) / 3;   // 70
        let y1_blk1 = y_upper_margin + y_blk_interval;
        let y2_blk1 = y1_blk1 + y_blk_height - 1;
        let y1_blk2 = y_upper_margin + (y_blk_interval * 2) + y_blk_height;
        let y2_blk2 = y1_blk2 + y_blk_height - 1;

        let y_gate_halfinter = (256 - y_upper_margin - (y_blk_height * 2) - (y_gate_height * 3)) / 6;   // 10
        let y1_gate1 = y_upper_margin + y_gate_halfinter;
        let y1_gate2 = y2_blk1 + 1 + y_gate_halfinter;
        let y1_gate3 = y2_blk2 + 1 + y_gate_halfinter;

        do Gate.init(x_width_mem, x_width, y_gate_height, x_vel, y_gate_halfinter);
        return;
    }

    constructor Obstacle new(int x) {
        let x1_init = x;
        let x1 = x1_init;
        let exists = false;
        let gate1 = Gate.new(y1_gate1, y1_gate1 + y_gate_height - 1);
        let gate2 = Gate.new(y1_gate2, y1_gate2 + y_gate_height - 1);
        let gate3 = Gate.new(y1_gate3, y1_gate3 + y_gate_height - 1);
        return this;
    }

    method void reset() {
        var int type1, type2, type3, same_choice;
        let type1 = LCGRandom.randRange(0,6);
        let type2 = LCGRandom.randRange(0,6);
        let type3 = LCGRandom.randRange(0,6);
        if ((type1 = 0) & (type2 = 0) & (type3 = 0)) {
            let same_choice = LCGRandom.randRange(1,3);
            if (same_choice = 1) { let type1 = LCGRandom.randRange(1,6); } else {
            if (same_choice = 2) { let type2 = LCGRandom.randRange(1,6); } else {
            let type3 = LCGRandom.randRange(1,6); }}
        }
        let x1 = x1_init;
        let exists = false;
        do gate1.reset(type1);
        do gate2.reset(type2);
        do gate3.reset(type3);
        return;
    }

    method void rebuild() {
        do Screen.setColor(false);
        do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1_blk1, Math.min(Math.max(x1 + x_width,0),511), y2_blk1);
        do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1_blk2, Math.min(Math.max(x1 + x_width,0),511), y2_blk2);
        do gate1.eraseGate();
        do gate2.eraseGate();
        do gate3.eraseGate();
        do reset();
        let x1 = 512;
        return;
    }

    method void dispose() {
        do gate1.dispose();
        do gate2.dispose();
        do gate3.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method int collision(int player_x1, int player_y1, int player_x2, int player_y2, boolean player_state) {
        // return: -1: collision, 1: pass gate, 0: no collision
        if ((player_x1 < (x1 + x_width)) & (player_x2 > x1)) {
            if (((player_y1 < y2_blk1) & (player_y2 > y1_blk1)) | ((player_y1 < y2_blk2) & (player_y2 > y1_blk2))) { return -1; }
            // else
            if (player_y1 < y1_blk1) {
                if (gate1.collision(player_state)) { return -1; }
                else { return 1; }
            } else {if (player_y1 < y1_blk2) {
                if (gate2.collision(player_state)) { return -1; }
                else { return 1; }
            } else {
                if (gate3.collision(player_state)) { return -1; }
                else { return 1; }
            }}
        }
        return 0;
    }

    method void update() {
        if (x1 = 0) {
            do rebuild();
        } else {
            let x1 = x1 - x_vel;
            if (x1 = (512 - x_width)) {
                do Screen.setColor(true);
                do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1_blk1, Math.min(Math.max(x1 + x_width,0),511), y2_blk1);
                do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1_blk2, Math.min(Math.max(x1 + x_width,0),511), y2_blk2);
                do gate1.appearGate();
                do gate2.appearGate();
                do gate3.appearGate();
                let exists = true;
            }
        }
        if (exists) { 
            // New frame
            do Screen.setColor(true);
            do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1_blk1, Math.min(Math.max(x1 + x_vel,0),511), y2_blk1);
            do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1_blk2, Math.min(Math.max(x1 + x_vel,0),511), y2_blk2);
            // Clear previous frame
            do Screen.setColor(false);
            do Screen.drawRectangle(Math.min(Math.max(x1 + x_width,0),511), y1_blk1, Math.min(Math.max(x1 + x_width + x_vel,0),511), y2_blk1);
            do Screen.drawRectangle(Math.min(Math.max(x1 + x_width,0),511), y1_blk2, Math.min(Math.max(x1 + x_width + x_vel,0),511), y2_blk2);
            // Gate
            do gate1.update(x1);
            do gate2.update(x1);
            do gate3.update(x1);
        }
        return;
    }
}