class Obstacle {
    // Constants
    static int x_width;     // Width of obstacles
    static int y_height;    // Height of obstacles
    static int x_vel;       // Movement speed on screen
    static int y1;          // y1 position
    static int x_interval;  // Interval between obstacles x1's

    // Fields
    field int x1;           // x1 position on screen

    function void init() {
        var int y_upper_part;
        let y_upper_part = 40;
        let x_width = 100;
        let y_height = 4;
        let x_vel = 2;
        
        let y1 = y_upper_part + (256 - y_upper_part - y_height) / 2;
        let x_interval = (512 - x_width) / 2 + x_width;
        return;
    }

    constructor Obstacle new(int x) {
        do reset(x);
        return this;
    }

    method void reset(int x) {
        let x1 = x;
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method boolean collision(int player_x1, int player_y1, int player_x2, int player_y2) {
        if ((player_x1 < (x1 + x_width)) & (player_x2 > x1) & (player_y1 < (y1 + y_height)) & (player_y2 > y1)) {
            return true;
        }
        return false;
    }

    method void draw() {
        // New frame
        do Screen.setColor(true);
        do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1, Math.min(Math.max(x1 + x_vel,0),511), y1 + y_height);
        // Clear previous frame
        do Screen.setColor(false);
        do Screen.drawRectangle(Math.min(Math.max(x1 + x_width,0),511), y1, Math.min(Math.max(x1 + x_width + x_vel,0),511), y1 + y_height);
        return;
    }

    method void tick() {
        let x1 = x1 - x_vel;
        if (x1 + 1 < -x_width) {
            do reset(511);
        }
        return;
    }

    method void update() {
        do tick();
        do draw();
        return;
    }
    
    function int width() { return x_width; }
    function int interval() { return x_interval; }
}