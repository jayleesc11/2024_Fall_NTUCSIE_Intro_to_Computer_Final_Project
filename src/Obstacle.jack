class Obstacle {
    // Constants
    static int x_width;         // Width of obstacles
    static int y_height;        // Height of obstacles
    static int x_vel;           // Movement speed on screen
    static int x_interval;      // Interval between obstacles x1's
    static int y_upper_margin;  // Upper margin of obstacles
    static int y_obs_interval;  // Interval between obstacles y1's

    // Fields
    field int x1;               // x1 position on screen
    field int x1_init;          // Initial x1 position on screen (constant)
    field int y1;               // y1 position on screen (constant)
    field int y2;               // y2 position on screen (constant)

    function void init(int margin, int width) {
        let y_height = 2;
        let x_vel = 2;
        let x_width = width;
        let y_upper_margin = margin;

        let x_interval = ((512 - x_width) / 2) + x_width;           // 306
        let y_obs_interval = (255 - y_upper_margin - (2 * 2)) / 3;  // 70
        return;
    }

    constructor Obstacle new(int x_index, int y_index) {
        let x1_init = 512 + ((x_index - 1) * x_interval);
        let x1 = x1_init;
        let y1 = y_upper_margin + ((y_height + y_obs_interval) * y_index) - y_height;
        let y2 = y1 + y_height - 1;
        return this;
    }

    method void reset() {
        let x1 = x1_init;
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method boolean collision(int player_x1, int player_y1, int player_x2, int player_y2) {
        if ((player_x1 < (x1 + x_width)) & (player_x2 > x1) & (player_y1 < y2) & (player_y2 > y1)) {
            return true;
        }
        return false;
    }

    method void draw() {
        // New frame
        do Screen.setColor(true);
        do Screen.drawRectangle(Math.min(Math.max(x1,0),511), y1, Math.min(Math.max(x1 + x_vel,0),511), y2);
        // Clear previous frame
        do Screen.setColor(false);
        do Screen.drawRectangle(Math.min(Math.max(x1 + x_width,0),511), y1, Math.min(Math.max(x1 + x_width + x_vel,0),511), y2);
        return;
    }

    method void tick() {
        if (x1 + 1 < -x_width) {
            let x1 = 512;
        } else {
            let x1 = x1 - x_vel;
        }
        return;
    }

    method void update() {
        do draw();
        do tick();
        return;
    }
    
    function int interval() { return x_interval; }
}