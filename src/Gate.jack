class Gate {
    // Constants
    static int x_width;         // Width of gates
    static int y_height;        // Height of gates
    static int x_vel;           // Movement speed on screen
    static int x_interval;      // Interval between gates x1's
    static int y_upper_margin;  // Upper margin of obstacles
    static int y_gate_interval; // Interval between gates y1's

    // Fields
    field int x1;               // x1 position on screen
    field int y1;               // y1 position on screen
    field int x1_init;          // Initial x1 position on screen

    field int tick;             // Animation tick
    field int type;             // Gate type {0:NULL, 1:AND, 2:NAND, 3:OR, 4:NOR, 5:XOR, 6:XNOR}
    field boolean input_rand;   // Input 2
    field boolean output;       // Gate output

    function void init(int margin) {
        let x_width = 100;
        let y_height = 50;
        let x_vel = 2;
        let y_upper_margin = margin;

        let x_interval = (512 - x_width) / 2 + x_width;
        let y_gate_interval = (256 - y_upper_margin - (3 * y_height)) / 4;
        return;
    }

    constructor Gate new(int x_index, int y_index) {
        let x1_init = 511 + ((x_index - 1) * x_interval);
        let y1 = y_upper_margin + (y_height * (y_index - 1)) + (y_gate_interval * y_index);
        do reset();
        return this;
    }

    method void reset() {
        let x1 = x1_init;
        //let type = LCGRandom.randRange(1,6);
        //let input_rand = LCGRandom.randRange(0,1);
        return;
    }

    method void rebuild() {
        let x1 = 511;
        //let type = LCGRandom.randRange(1,6);
        //let input_rand = LCGRandom.randRange(0,1);
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method boolean output(boolean input_stat) {
        if (type = 1) {let output = input_stat & input_rand;} else { 
        if (type = 2) {let output = ~(input_stat & input_rand);} else { 
        if (type = 3) {let output = input_stat | input_rand;} else { 
        if (type = 4) {let output = ~(input_stat | input_rand);} else { 
        if (type = 5) {let output = (input_stat & ~input_rand) | (~input_stat & input_rand);} else { 
        if (type = 6) {let output = (input_stat & input_rand) | (~input_stat & ~input_rand);} else { 
        let output = false;}}}}}}
        return output;
    }

    method void tick() {
        let tick = tick + 1;
        if (x1 + 1 < -x_width) {
            do rebuild();
        } else {
            let x1 = x1 - x_vel;
        }
        return;
    }

    method void draw() {
        return;
    }

    method void update() {
        do tick();
        do draw();
        return;
    }

    function int width() { return x_width; }
}
