class Game {
    // Constants
    static int delay;
    static int y_upper_margin;

    // Objects
    field Score score;
    field Player player;

    field Gate gate1_1;
    field Gate gate1_2;
    field Gate gate1_3;
    field Gate gate2_1;
    field Gate gate2_2;
    field Gate gate2_3;

    field Obstacle obs1_1;
    field Obstacle obs1_2;
    field Obstacle obs2_1;
    field Obstacle obs2_2;

    // Internal states
    field char key;
    field char last_key;
    field boolean first_start;
    field boolean start;
    field boolean pause;

    // Player data
    field int player_x1;        // constant
    field int player_y1;
    field int player_x2;        // constant
    field int player_y2;
    field boolean player_value;
    field boolean player_last_value;

    // Random number seed
    field int seed;

    function void init() {
        let delay = 9;
        let y_upper_margin = 41;
        return;
    }

    constructor Game new() {
        do Score.init();
        do Player.init(y_upper_margin);
        do Gate.init(y_upper_margin, 2);
        do Obstacle.init(y_upper_margin, Gate.width());

        let score = Score.new();
        let player = Player.new();
        // Player data
        let player_x1 = player.x1();
        let player_y1 = player.y1();
        let player_x2 = player.x2();
        let player_y2 = player.y2();
        let player_value = false;
        let player_last_value = false;

        let gate1_1 = Gate.new(1,1);
        let gate1_2 = Gate.new(1,2);
        let gate1_3 = Gate.new(1,3);
        let gate2_1 = Gate.new(2,1);
        let gate2_2 = Gate.new(2,2);
        let gate2_3 = Gate.new(2,3);

        let obs1_1 = Obstacle.new(1,1);
        let obs1_2 = Obstacle.new(1,2);
        let obs2_1 = Obstacle.new(2,1);
        let obs2_2 = Obstacle.new(2,2);

        let first_start = false;
        let start = false;
        let seed = 0;
        let last_key = 0;
        return this;
    }

    method void dispose() {
        do score.dispose();
        do player.dispose();

        do gate1_1.dispose();
        do gate1_2.dispose();
        do gate1_3.dispose();
        do gate2_1.dispose();
        do gate2_2.dispose();
        do gate2_3.dispose();

        do obs1_1.dispose();
        do obs1_2.dispose();
        do obs2_1.dispose();
        do obs2_2.dispose();

        do Memory.deAlloc(this);
        return;
    }

    method boolean whitespace() {
        let key = Keyboard.keyPressed();
        if (key = 32 & ~(last_key = 32)) {
            let last_key = key;
            return true;
        }
        let last_key = key;
        return false;
    }

    method void handle_input() {
        let key = Keyboard.keyPressed();
        if ((key = 32) & ~(last_key = 32)) { // whitespace
            let pause = ~pause;
        } else {
            if (~pause) {
                if (key = 131) { // up arrow
                    do player.move(true);
                } else {
                    if (key = 133) { // down arrow
                        do player.move(false);
                    }
                }
            }
        }
        let last_key = key;
        return;
    }

    method void draw_upper() {
        do Screen.setColor(true);
        do Screen.drawRectangle(0, y_upper_margin - 1, 511, y_upper_margin);
        return;
    }

    method void update() {
        do score.show();
        do player.update();
        let player_y1 = player.y1();
        let player_y2 = player.y2();
        
        do gate1_1.update();
        do gate1_2.update();
        do gate1_3.update();
        do gate2_1.update();
        do gate2_2.update();
        do gate2_3.update();

        do obs1_1.update();
        do obs1_2.update();
        do obs2_1.update();
        do obs2_2.update();
        
        if (obs1_1.collision(player_x1, player_y1, player_x2, player_y2) |
            obs1_2.collision(player_x1, player_y1, player_x2, player_y2) |
            obs2_1.collision(player_x1, player_y1, player_x2, player_y2) |
            obs2_2.collision(player_x1, player_y1, player_x2, player_y2)) {
            let start = false;
        }

        if (gate1_1.collision(player_x1, player_y1, player_x2, player_y2, player_value) |
            gate1_2.collision(player_x1, player_y1, player_x2, player_y2, player_value) |
            gate1_3.collision(player_x1, player_y1, player_x2, player_y2, player_value) |
            gate2_1.collision(player_x1, player_y1, player_x2, player_y2, player_value) |
            gate2_2.collision(player_x1, player_y1, player_x2, player_y2, player_value) |
            gate2_3.collision(player_x1, player_y1, player_x2, player_y2, player_value)) {
            do player.setVal(Gate.output());
            let player_value = player.value();
            if (~player_last_value & player_value) {
                do score.increment();
            }
            let player_last_value = player_value;
        }
        return;
    }

    method boolean run() {
        // first start
        while(~first_start) {
            let seed = seed + 1;
            if (seed < 0) {
                let seed = 0;
            }
            if (whitespace()) {
                do LCGRandom.setSeed(seed);
                let first_start = true;
                let start = true;
                do draw_upper();
                do Score.printSCORE();
                // LCGRandom seed set, set random values
                do gate1_1.reset();
                do gate1_2.reset();
                do gate1_3.reset();
                do gate2_1.reset();
                do gate2_2.reset();
                do gate2_3.reset();
            }
        }
        // During the game
        while (start) {
            do handle_input();
            if (~pause) {
                do update();
            }
            do Sys.wait(delay);
        }
        // Game over, restart or not
        while (~start) {
            if (whitespace()) {
                do reset();
            }
        }
        return true;
    }

    method void reset() {
        let start = true;
        let pause = false;
        do Screen.clearScreen();

        do draw_upper();
        do score.reset();
        do player.reset();

        do gate1_1.reset();
        do gate1_2.reset();
        do gate1_3.reset();
        do gate2_1.reset();
        do gate2_2.reset();
        do gate2_3.reset();

        do obs1_1.reset();
        do obs1_2.reset();
        do obs2_1.reset();
        do obs2_2.reset();

        return;
    }
}