class Game {
    // Constants
    static int delay;
    static int y_upper_margin;

    // Objects
    field Score score;
    field Player player;
    field Obstacle obs1;
    field Obstacle obs2;

    // Internal states
    field char key;
    field char last_key;
    field boolean first_start;
    field boolean start;
    field boolean pause;
    field int obs_collision_state;

    // Player data
    field int player_x1;        // constant
    field int player_y1;
    field int player_x2;        // constant
    field int player_y2;
    field boolean player_value;

    // Random number seed
    field int seed;

    function void init() {
        let delay = 4;
        let y_upper_margin = 42;
        return;
    }

    constructor Game new() {
        do Score.init();
        do Player.init(y_upper_margin);
        do Obstacle.init(y_upper_margin);

        let score = Score.new();
        let player = Player.new();
        // Player data
        let player_x1 = player.x1();
        let player_y1 = player.y1();
        let player_x2 = player.x2();
        let player_y2 = player.y2();
        let player_value = false;

        let obs1 = Obstacle.new(512);
        let obs2 = Obstacle.new(512 + 256);

        let key = 0;
        let last_key = 0;
        let first_start = false;
        let start = false;
        let pause = false;
        let obs_collision_state = 0;
        let seed = 0;
        return this;
    }

    method void dispose() {
        do score.dispose();
        do player.dispose();
        do obs1.dispose();
        do obs2.dispose();

        do Memory.deAlloc(this);
        return;
    }

    method boolean whitespace() {
        let key = Keyboard.keyPressed();
        if (key = 32 & ~(last_key = 32)) {
            let last_key = key;
            return true;
        }
        let last_key = key;
        return false;
    }

    method void handle_input() {
        let key = Keyboard.keyPressed();
        if ((key = 32) & ~(last_key = 32)) { // whitespace
            let pause = ~pause;
        } else {
            if (~pause) {
                if (key = 131) { // up arrow
                    do player.move(true);
                } else {
                    if (key = 133) { // down arrow
                        do player.move(false);
                    }
                }
            }
        }
        let last_key = key;
        return;
    }

    method void draw_upper() {
        do Screen.setColor(true);
        do Screen.drawRectangle(0, y_upper_margin - 2, 511, y_upper_margin - 1);
        do Score.printSCORE();
        return;
    }

    method void update() {
        do score.show();
        do player.update();
        let player_y1 = player.y1();
        let player_y2 = player.y2();

        do obs1.update();
        do obs2.update();

        let obs_collision_state = 
        obs1.collision(player_x1, player_y1, player_x2, player_y2, player_value) |
        obs2.collision(player_x1, player_y1, player_x2, player_y2, player_value);
        if (obs_collision_state = -1) {
            let start = false;
        } else {if (obs_collision_state = 1) {
            do player.setVal(Gate.output());
            if (~player_value & player.value()) {
                do score.increment();
            }
            let player_value = player.value();
        }}
        return;
    }

    method boolean run() {
        // first start
        while(~first_start) {
            let seed = seed + 1;
            if (seed < 0) {
                let seed = 0;
            }
            if (whitespace()) {
                do LCGRandom.setSeed(seed);
                let first_start = true;
                let start = true;
                do draw_upper();
                // LCGRandom seed set, set random values
                do obs1.reset();
                do obs2.reset();
            }
        }
        // During the game
        while (start) {
            do handle_input();
            if (~pause) {
                do update();
            }
            do Sys.wait(delay);
        }
        // Game over, restart or not
        while (~start) {
            if (whitespace()) {
                do reset();
            }
        }
        return true;
    }

    method void reset() {
        let start = true;
        let pause = false;
        do Screen.clearScreen();
        do draw_upper();

        do score.reset();
        do player.reset();
        do obs1_1.reset();
        do obs1_2.reset();

        return;
    }
}