class Game {
    // Constants
    static int word_width;
    static int delay_init;
    static int score_per_level;
    static int y_upper_margin;

    // Objects
    field Score score;
    field Level level;
    field Player player;
    field Obstacle obs1;
    field Obstacle obs2;

    // Internal states
    field int delay;
    field char key;
    field char last_key;
    field boolean first_start;
    field boolean start;
    field boolean pause;
    field int obs_collision_state;

    // Player data
    field int player_x1;        // constant
    field int player_y1;
    field int player_x2;        // constant
    field int player_y2;
    field boolean player_value;

    // Random number seed
    field int seed;

    function void init() {
        let word_width = 1;
        let delay_init = 4;
        let score_per_level = 10;
        let y_upper_margin = 42;
        return;
    }

    constructor Game new() {
        do Score.init(word_width);
        do Level.init(word_width);
        do Player.init(y_upper_margin);
        do Obstacle.init(y_upper_margin);

        let score = Score.new();
        let level = Level.new();
        let player = Player.new();
        // Player data
        let player_x1 = player.x1();
        let player_y1 = player.y1();
        let player_x2 = player.x2();
        let player_y2 = player.y2();
        let player_value = false;

        let obs1 = Obstacle.new(512);
        let obs2 = Obstacle.new(512 + 256);

        let delay = delay_init;
        let key = 0;
        let last_key = 0;
        let first_start = false;
        let start = false;
        let pause = false;
        let obs_collision_state = 0;
        let seed = 0;
        return this;
    }

    method void dispose() {
        do score.dispose();
        do player.dispose();
        do obs1.dispose();
        do obs2.dispose();

        do Memory.deAlloc(this);
        return;
    }

    method boolean whitespace() {
        let key = Keyboard.keyPressed();
        if (key = 32 & ~(last_key = 32)) {
            let last_key = key;
            return true;
        }
        let last_key = key;
        return false;
    }

    method void handle_input() {
        let key = Keyboard.keyPressed();
        if ((key = 32) & ~(last_key = 32)) { // whitespace
            let pause = ~pause;
        } else {
            if (~pause) {
                if (key = 131) { // up bigarrow
                    do player.move(true);
                } else {
                    if (key = 133) { // down bigarrow
                        do player.move(false);
                    }
                }
            }
        }
        let last_key = key;
        return;
    }

    method void draw_game_start() {
        do DrawOther.draw_player0_0(4 + (126 * 32));
        do DrawGate.draw_nor_16(0 + (10 * 32));
        do DrawGate.draw_and_16(23 + (80 * 32));
        do DrawGate.draw_xnor_16(25 + (200 * 32));
        do Output.moveCursor(15,16);
        do Output.printString("Press Enter to see the gameplay.");
        do Output.moveCursor(17,16);
        do Output.printString("Press SPACE to start the game!");
        return;
    }

    method void draw_game_instruction() {
        var int offset1, offset2, offset3, offset4, offset5;
        do Screen.clearScreen();
        let offset1 = 11 + (8 * 32);
        do DrawWord.draw_g(offset1);
        do DrawWord.draw_a(word_width + offset1);
        do DrawWord.draw_m(word_width * 2 + offset1);
        do DrawWord.draw_e(word_width * 3 + offset1);
        do DrawWord.draw_p(word_width * 4 + offset1);
        do DrawWord.draw_l(word_width * 5 + offset1);
        do DrawWord.draw_a(word_width * 6 + offset1);
        do DrawWord.draw_y(word_width * 7 + offset1);
        do Screen.setColor(true);
        do Screen.drawRectangle(170, 35, 310, 36);
        let offset2 = 2 + (52 * 32);
        do DrawOther.draw_player0_0(offset2);
        do DrawGate.draw_xor_16(offset2 + 3);
        do DrawInput.draw_in1_12(offset2 + 3 + 255);
        do DrawOther.draw_bigarrow(offset2 + 10 + (14 * 32));
        do DrawOther.draw_player1_0(offset2 + 13);
        let offset3 = offset2 + 13 + 3;
        do DrawWord.draw_s(offset3);
        do DrawWord.draw_c(word_width + offset3);
        do DrawWord.draw_o(word_width * 2 + offset3);
        do DrawWord.draw_r(word_width * 3 + offset3);
        do DrawWord.draw_e(word_width * 4 + offset3);
        do DrawWord.draw_z(word_width * 5 + offset3);
        do DrawWord.draw_9(word_width * 6 + offset3);
        do DrawOther.draw_smallarrow(offset3 + (word_width * 8) + (6 * 32));
        do DrawWord.draw_1(word_width * 10 + offset3);
        do DrawWord.draw_0(word_width * 11 + offset3);
        let offset4 = offset3 + (40 * 32);
        do DrawWord.draw_l(offset4);
        do DrawWord.draw_e(word_width + offset4);
        do DrawWord.draw_v(word_width * 2 + offset4);
        do DrawWord.draw_e(word_width * 3 + offset4);
        do DrawWord.draw_l(word_width * 4 + offset4);
        do DrawWord.draw_z(word_width * 5 + offset4);
        do DrawWord.draw_0(word_width * 6 + offset4);
        do DrawOther.draw_smallarrow(offset4 + (word_width * 8) + (6 * 32));
        do DrawWord.draw_1(word_width * 10 + offset4);
        let offset5 = offset2 + 1 + (110 * 32);
        do DrawOther.draw_upkey(offset5 + (20 * 32));
        do DrawOther.draw_player0_0(offset5 + 4);
        do Screen.drawRectangle(140, 175, 210, 215);
        do DrawOther.draw_space(offset5 + 19 + (8 * 32));
        do Output.moveCursor(10,5);
        do Output.printString("Gates change player's value.");
        do Output.moveCursor(12,5);
        do Output.printString("Score + 1 @ positive edge.");
        do Output.moveCursor(12,36);
        do Output.printString("Score 10 level up! Harder!");
        do Output.moveCursor(21,3);
        do Output.printString("Press UP/DOWN, avoid obstacles!");
        do Output.moveCursor(19,42);
        do Output.printString("Press SPACE to");
        do Output.moveCursor(21,39);
        do Output.printString("Start/Pause/Restart!");
        return;
    }

    method void draw_upper() {
        do Screen.setColor(true);
        do Screen.drawRectangle(0, y_upper_margin - 2, 511, y_upper_margin - 1);
        do Score.printSCORE();
        do score.show();
        do Level.printLEVEL();
        do level.show();
        return;
    }

    method void draw_gameover() {
        var int mem_offset;
        do Screen.setColor(true);
        do Screen.drawRectangle(11*16, 108, 21*16, 108 + 40);
        do Screen.setColor(false);
        do Screen.drawRectangle(11*16 + 4, 108 + 4, 21*16 - 4, 108 + 40 - 4);

        let mem_offset = 12 + (117 * 32);
        do DrawWord.draw_g(mem_offset);
        do DrawWord.draw_a(word_width + mem_offset);
        do DrawWord.draw_m(word_width * 2 + mem_offset);
        do DrawWord.draw_e(word_width * 3 + mem_offset);
        do DrawWord.draw_o(word_width * 4 + mem_offset);
        do DrawWord.draw_v(word_width * 5 + mem_offset);
        do DrawWord.draw_e(word_width * 6 + mem_offset);
        do DrawWord.draw_r(word_width * 7 + mem_offset);

        do Output.moveCursor(14,21);
        do Output.printString("Press SPACE to restart!");
        return;
    }

    method void update() {
        do player.update();
        let player_y1 = player.y1();
        let player_y2 = player.y2();

        do obs1.update();
        do obs2.update();

        let obs_collision_state = 
        obs1.collision(player_x1, player_y1, player_x2, player_y2, player_value) |
        obs2.collision(player_x1, player_y1, player_x2, player_y2, player_value);
        if (obs_collision_state = -1) {
            let start = false;
        } else {if (obs_collision_state = 1) {
            do player.setVal(Gate.output());
            if (~player_value & player.value()) {
                do score.increment();
                // Level up
                if(~(delay = 0) & (LCGRandom.mod(score.getScore(), score_per_level) = 0)) {
                    let delay = delay - 1;
                    do level.increment();
                    do Obstacle.increNull();
                }
            }
            let player_value = player.value();
        }}
        return;
    }

    method boolean run() {
        // first start
        if (~first_start) { do draw_game_start(); }
        while(~first_start) {
            let seed = seed + 1;
            if (seed < 0) {
                let seed = 0;
            }
            if(Keyboard.keyPressed() = 128) {   // Enter
                do draw_game_instruction();
            }
            if (whitespace()) {
                do Screen.clearScreen();
                do LCGRandom.setSeed(seed);
                let first_start = true;
                let start = true;
                do draw_upper();
                // LCGRandom seed set, set random values
                do obs1.reset();
                do obs2.reset();
            }
        }
        // During the game
        while (start) {
            do handle_input();
            if (~pause) {
                do update();
            }
            do Sys.wait(delay);
        }
        // Game over, restart or not
        do draw_gameover();
        while (~start) {
            if (whitespace()) {
                do reset();
            }
        }
        return true;
    }

    method void reset() {
        let delay = delay_init;    
        let start = true;
        let pause = false;
        do Screen.clearScreen();

        do score.reset();
        do level.reset();
        do player.reset();
        do obs1.reset();
        do obs2.reset();

        do draw_upper();

        return;
    }
}