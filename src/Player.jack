class Player {
    // Constants
    static int x_width;                 // Bounding box width
    static int y_height;                // Bounding box height
    static int x1_mem;                  // (Initial) x1 position in memory
    static int x1;                      // (Initial) x1 position on screen
    static int x2;                      // (Initial) x2 position on screen
    static int y1_init;                 // Initial y1 position on screen
    static int mem_pos_init;            // Initial position in memory
    static int y_vel;                   // Movement speed on screen
    static int y_vel_mem;               // Movement speed in memory
    static int y_screen_lower_bound;    // Lower bound of y1 position on screen
    static int y_screen_upper_bound;    // Upper bound of y1 position on screen
    static int frame_interval;          // Animation frame interval

    // Fields
    field int y1;                       // y1 position on screen
    field int mem_pos;                  // Position in memory
    field int tick;                     // Animation tick
    field boolean skin;                 // Player's skin
    field boolean value;                // Player's value

    function void init(int y_upper_margin) {
        var int x_width, x1_mem;

        let x_width = 16;
        let y_height = 44;
        let x1_mem = 4;
        let y_vel = 2;
        let frame_interval = 15;

        let x1 = x1_mem * 16;
        let x2 = x1 + x_width - 1;
        let y1_init = y_upper_margin - 1 + ((256 - y_upper_margin - y_height) / 2); // 126
        let mem_pos_init = x1_mem + (y1_init * 32);
        let y_vel_mem = y_vel * 32;
        let y_screen_lower_bound = y_upper_margin;                                  // 42
        let y_screen_upper_bound = 256 - y_height;                                  // 212
        return;
    }

    constructor Player new() {
        do reset();
        return this;
    }

    method void reset() {
        let y1 = y1_init;
        let mem_pos = mem_pos_init;
        let tick = 0;
        let skin = false;
        let value = false;
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void move(boolean up) {
        if (up) {
            if (y1 > y_screen_lower_bound) {
                let y1 = y1 - y_vel;
                let mem_pos = mem_pos - y_vel_mem;
            }
        } else {
            if (y1 < y_screen_upper_bound) {
                let y1 = y1 + y_vel;
                let mem_pos = mem_pos + y_vel_mem;
            }
        }
        return;
    }

    method void setVal(boolean val) {
        let value = val;
        return;
    }

    method void update() {
        if (value) {
            if (skin) {
                do SpriteManager.draw_player1_1(mem_pos);
            } else {
                do SpriteManager.draw_player1_0(mem_pos);
            }
        } else {
            if (skin) {
                do SpriteManager.draw_player0_1(mem_pos);
            } else {
                do SpriteManager.draw_player0_0(mem_pos);
            }
        }

        let tick = tick + 1;
        if (tick = frame_interval) {
            let tick = 0;
            let skin = ~skin;
        }
        return;
    }

    method int x1() { return x1; }
    method int y1() { return y1; }
    method int x2() { return x2; }
    method int y2() { return y1 + y_height - 1; }
    method boolean value() { return value; }
}